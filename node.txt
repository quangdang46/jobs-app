asChild mu·ªën d√πng ch·ª©c nƒÉng ph·∫ßn t·ª≠ con nh∆∞ng css c·ªßa cha

Pick<..typeof..> d√πng ƒë·ªÉ chon 1 s·ªë type

ref g·∫Øn v√†o ph·∫ßn t·ª≠ ,qu·∫£n l√≠ ph·∫ßn t·ª≠ ƒë√≥ 


refind zod ,ƒë·ªãnh nghƒ©a schema,ph·ª• thu·ªôc
.refine((data) => ƒëi·ªÅu_ki·ªán_boolean, {
  message: "Th√¥ng b√°o l·ªói n·∫øu sai",
  path: ["t√™nTr∆∞·ªùngG√¢yL·ªói"],
})

sr-only "screen reader only" ‚Üí ch·ªâ hi·ªÉn th·ªã cho tr√¨nh ƒë·ªçc m√†n h√¨nh, c√≤n ng∆∞·ªùi d√πng kh√¥ng nh√¨n th·∫•y tr√™n UI.


export const wageIntervals = ["hourly", "yearly"] as const;
export type WageInterval = (typeof wageIntervals)[number];

ƒë·ª° ph·∫£i ƒë·ªãnh nghƒ©a l·∫°i m·∫£ng v√† t·ª± ƒë·ªông export type


prose class typography taildwindcss @taildwindcss/typography


markdown:remark-gfm,next-mdx-remote,@mdxeditor/editor


const box = document.getElementById("box");

console.log(box.clientHeight);   // 100  ‚Üê chi·ªÅu cao v√πng hi·ªÉn th·ªã
console.log(box.scrollHeight);   // 300  ‚Üê chi·ªÅu cao to√†n b·ªô n·ªôi dung b√™n trong


delay
await new Promise((res) => setTimeout(res, 1000));



    const action = jobListing
      ? updateJobListing.bind(null, jobListing.id)
      : createJobListing;
    const res = await action(data);


Omit<T, K>	Lo·∫°i b·ªè K thu·ªôc t√≠nh kh·ªèi T	Pick



const daysSincePosted = differenceInDays(postedAt, Date.now());
differenceInDays (th∆∞·ªùng t·ª´ date-fns) t√≠nh s·ªë ng√†y gi·ªØa postedAt v√† b√¢y gi·ªù.

return new Intl.RelativeTimeFormat(undefined, {
  style: "narrow",
  numeric: "always",
}).format(daysSincePosted, "days");
Intl.RelativeTimeFormat l√† API qu·ªëc t·∫ø h√≥a c·ªßa JavaScript.

Format ki·ªÉu th·ªùi gian ng·∫Øn g·ªçn v√≠ d·ª•:

"3 days ago" ‚Üí khi daysSincePosted = -3

"in 2 days" ‚Üí khi daysSincePosted = 2

undefined nghƒ©a l√† t·ª± ƒë·ªông l·∫•y locale t·ª´ browser ho·∫∑c server.

type MyType = z.infer<typeof mySchema>;
mySchema l√† schema b·∫°n ƒë·ªãnh nghƒ©a b·∫±ng Zod.

z.infer<typeof ...> s·∫Ω t·∫°o ra ki·ªÉu TypeScript ch√≠nh x√°c t·ª´ schema ƒë√≥.

typescript

import { z } from "zod";

const userSchema = z.object({
  name: z.string(),
  age: z.number(),
});

type User = z.infer<typeof userSchema>;

K·∫øt qu·∫£ TypeScript c·ªßa User s·∫Ω gi·ªëng nh∆∞:

type User = {
  name: string;
  age: number;
}



Object.groupBy() l√† g√¨?
ƒê√¢y l√† m·ªôt h√†m JavaScript chu·∫©n (t·ª´ ES2024) ƒë·ªÉ gom nh√≥m c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt m·∫£ng theo key b·∫°n ch·ªâ ƒë·ªãnh.

‚úÖ C√∫ ph√°p c∆° b·∫£n:

const grouped = Object.groupBy(array, (item) => item.key);
‚ü∂ Tr·∫£ v·ªÅ m·ªôt object m√† m·ªói key l√† k·∫øt qu·∫£ c·ªßa function (item) => key, v√† value l√† m·ªôt array c√°c ph·∫ßn t·ª≠ kh·ªõp key ƒë√≥.

V√≠ d·ª• c·ª• th·ªÉ d·ªÖ hi·ªÉu:
Gi·∫£ s·ª≠ d·ªØ li·ªáu nh∆∞ sau:

const userNotifications = [
  { userId: 1, organizationId: 10 },
  { userId: 1, organizationId: 20 },
  { userId: 2, organizationId: 30 }
];
üëâ Sau khi ch·∫°y:

const groupedNotifications = Object.groupBy(
  userNotifications,
  (n) => n.userId
);
‚úÖ K·∫øt qu·∫£ s·∫Ω l√†:

{
  "1": [
    { userId: 1, organizationId: 10 },
    { userId: 1, organizationId: 20 }
  ],
  "2": [
    { userId: 2, organizationId: 30 }
  ]
}


useOptimistic t·∫°o hi·ªáu ·ª©ng c·∫≠p nh·∫≠t ‚Äúgi·∫£ l·∫≠p‚Äù ‚Üí UX m∆∞·ª£t h∆°n.

useTransition gi√∫p non-blocking UI khi c·∫≠p nh·∫≠t async.

Khi click dropdown:

G·ª≠i API update stage/rating.

C·∫≠p nh·∫≠t optimistic UI.



check Applications component


E:\jobs-app\src\features\organizations\components\SidebarOrganizationButton.tsx
fix inngest not working in production
fix deploy ui






```
explained this code
"use client";

import { ReactNode, useEffect, useLayoutEffect, useRef, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "../ui/button";

export default function MarkdownPartial({
  mainMarkdown,
  dialogMarkdown,
  dialogTitle,
}: {
  mainMarkdown: ReactNode;
  dialogMarkdown: ReactNode;
  dialogTitle: string;
}) {
  const [isOverflowing, setIsOverflowing] = useState(false);

  const markdownRef = useRef<HTMLDivElement>(null);
  function checkOverflow(node: HTMLDivElement) {
    setIsOverflowing(node.scrollHeight > node.clientHeight);
  }

  useEffect(() => {
    const controller = new AbortController();
    window.addEventListener(
      "resize",
      () => {
        if (markdownRef.current == null) return;
        checkOverflow(markdownRef.current);
      },
      { signal: controller.signal }
    );

    return () => {
      controller.abort();
    };
  }, []);

  useLayoutEffect(() => {
    if (markdownRef.current == null) return;
    checkOverflow(markdownRef.current);
  }, []);

  return (
    <>
      <div ref={markdownRef} className="max-h-[300px] overflow-hidden relative">
        {mainMarkdown}
        {isOverflowing && (
          <div className="bg-gradient-to-t from-background to-transparent to-15% inset-0 absolute pointer-events-none" />
        )}
      </div>

      {isOverflowing && (
        <Dialog>
          <DialogTrigger asChild>
            <Button variant="ghost" className="underline -ml-3">
              Read More
            </Button>
          </DialogTrigger>
          <DialogContent className="md:max-w-3xl lg:max-w-4xl max-h-[calc(100%-2rem)] overflow-hidden flex flex-col">
            <DialogHeader>
              <DialogTitle>{dialogTitle}</DialogTitle>
            </DialogHeader>
            <div className="flex-1 overflow-y-auto">{dialogMarkdown}</div>
          </DialogContent>
        </Dialog>
      )}
    </>
  );
}

```
