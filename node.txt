asChild muốn dùng chức năng phần tử con nhưng css của cha

Pick<..typeof..> dùng để chon 1 số type

ref gắn vào phần tử ,quản lí phần tử đó 


refind zod ,định nghĩa schema,phụ thuộc
.refine((data) => điều_kiện_boolean, {
  message: "Thông báo lỗi nếu sai",
  path: ["tênTrườngGâyLỗi"],
})

sr-only "screen reader only" → chỉ hiển thị cho trình đọc màn hình, còn người dùng không nhìn thấy trên UI.


export const wageIntervals = ["hourly", "yearly"] as const;
export type WageInterval = (typeof wageIntervals)[number];

đỡ phải định nghĩa lại mảng và tự động export type


prose class typography taildwindcss @taildwindcss/typography


markdown:remark-gfm,next-mdx-remote,@mdxeditor/editor


const box = document.getElementById("box");

console.log(box.clientHeight);   // 100  ← chiều cao vùng hiển thị
console.log(box.scrollHeight);   // 300  ← chiều cao toàn bộ nội dung bên trong


delay
await new Promise((res) => setTimeout(res, 1000));



    const action = jobListing
      ? updateJobListing.bind(null, jobListing.id)
      : createJobListing;
    const res = await action(data);


Omit<T, K>	Loại bỏ K thuộc tính khỏi T	Pick



const daysSincePosted = differenceInDays(postedAt, Date.now());
differenceInDays (thường từ date-fns) tính số ngày giữa postedAt và bây giờ.

return new Intl.RelativeTimeFormat(undefined, {
  style: "narrow",
  numeric: "always",
}).format(daysSincePosted, "days");
Intl.RelativeTimeFormat là API quốc tế hóa của JavaScript.

Format kiểu thời gian ngắn gọn ví dụ:

"3 days ago" → khi daysSincePosted = -3

"in 2 days" → khi daysSincePosted = 2

undefined nghĩa là tự động lấy locale từ browser hoặc server.

type MyType = z.infer<typeof mySchema>;
mySchema là schema bạn định nghĩa bằng Zod.

z.infer<typeof ...> sẽ tạo ra kiểu TypeScript chính xác từ schema đó.

typescript

import { z } from "zod";

const userSchema = z.object({
  name: z.string(),
  age: z.number(),
});

type User = z.infer<typeof userSchema>;

Kết quả TypeScript của User sẽ giống như:

type User = {
  name: string;
  age: number;
}